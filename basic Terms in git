1)Commit
	Every time you commit (save the state of your project in Git), it basically takes a picture of what all your files look like at that moment and stores a reference of it. 

2) Repository / repo

	A repository is a directory which contains your project work, as well as a few files (hidden by default on Mac OS X) which are used to communicate with Git. Repositories can exist either locally on your computer or as a remote copy on another computer. A repository is made up of commits.

Working Directory

	The Working Directory is the files that you see in your computer's file system. When you open your project files up on a code editor, you're working with files in the Working Directory.

	This is in contrast to the files that have been saved (in commits!) in the repository.

	When working with Git, the Working Directory is also different from the command line's concept of the current working directory which is the directory that your shell is "looking at" right now.

Checkout

	A checkout is when content in the repository has been copied to the Working Directory.
	Staging Area / Staging Index / Index

	A file in the Git directory that stores information about what will go into your next commit. You can think of the staging area as a prep table where Git will take the next commit. Files on the Staging Index are poised to be added to the repository.
	SHA

A SHA is basically an ID number for each commit. Here's what a commit's SHA might look like: e2adf8ae3e2e4ed40add75cc44cf9d0a869afeb6.

	It is a 40-character string composed of characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git. "SHA" is shorthand for "Secure Hash Algorithm". If you're interested in learning about hashes, check out our Intro to Computer Science course.

Branch

	A branch is when a new line of development is created that diverges from the main line of development. This alternative line of development can continue without altering the main line.

Going back to the example of save point in a game, you can think of a branch as where you make a save point in your game and then decide to try out a risky move in the game. If the risky move doesn't pan out, then you can just go back to the save point. The key thing that makes branches incredibly powerful is that you can make save points on one branch, and then switch to a different branch and make save points there, too.

With this terminology in mind, let's take a high-level look at how we'll be using Git by looking at the typical workflow when working with version control.

When a commit is made, only the changes that are in the Staging Index are saved in the repository.




In the context of Git, the term "3-Stage Architecture" typically refers to the three main components or stages involved in the lifecycle of changes in a Git repository. These stages are associated with the "git add" and "git commit" commands. The three stages are:

    Working Directory:
        This is where you make modifications to your files.
        Changes in this stage are not tracked by Git until you explicitly tell Git to start tracking them.

    Staging Area (Index):
        After making changes in the working directory, you use the "git add" command to move these changes to the staging area.
        The staging area is like a snapshot of what will go into your next commit.
        Changes in the staging area are not committed yet, but they are marked to be included in the next commit.

    Repository (HEAD):
        The repository, often referred to as HEAD, is where Git permanently stores the committed changes.
        After adding changes to the staging area, you use the "git commit" command to create a new commit with those changes.
        Commits in the repository are immutable and form a version history of your project.

The three-stage architecture allows for a more controlled and flexible approach to managing changes. It enables you to review and selectively include changes in your commits, promoting a cleaner and more organized version history. 